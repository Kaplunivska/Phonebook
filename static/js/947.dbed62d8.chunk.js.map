{"version":3,"file":"static/js/947.dbed62d8.chunk.js","mappings":"yRACaA,EAAYC,EAAAA,EAAAA,IAAH,mHAMTC,EAAOD,EAAAA,EAAAA,KAAH,8RACK,qBAAGE,MAAkBC,OAAOC,KAA5B,IAYTC,EAAOL,EAAAA,EAAAA,EAAH,sFACN,qBAAGE,MAAkBC,OAAOG,IAA5B,IAKEC,EAAQP,EAAAA,EAAAA,MAAH,4YAKI,qBAAGE,MAAkBC,OAAOG,IAA5B,IAKF,qBAAGJ,MAAkBC,OAAOK,MAA5B,IAUPC,EAAaT,EAAAA,EAAAA,EAAH,qFAKVU,EAASV,EAAAA,EAAAA,OAAH,gkBAMG,qBAAGE,MAAkBC,OAAOK,MAA5B,IACX,qBAAGN,MAAkBC,OAAOC,KAA5B,IAQa,qBAAGF,MAAkBC,OAAOG,IAA5B,I,SCpDT,SAASK,IAAa,IAAD,IAC5BC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9B,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,MACNC,cAAe,CACbC,KAAM,GACNC,MAAO,MARTC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAiBf,OACE,8BACE,SAAC1B,EAAD,WACE,UAACE,EAAD,CAAM0B,SAAUJ,GAXE,SAAAK,GACtBhB,GAASiB,EAAAA,EAAAA,IAAMD,IACZE,SACAC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcC,EAAAA,GAAAA,QAAA,uBAA8BD,EAAKZ,MAAjD,IACLc,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,yCAAlB,IAETT,GACD,IAIK,WACE,SAACnB,EAAD,sBACA,SAACE,GAAD,gBACE4B,KAAK,QACDb,EAAS,QAAS,CACpBc,SAAU,oBACVC,QAAS,CACPC,MAAO,4CACPC,QAAS,4BANf,IASEC,YAAY,YAEd,SAAC/B,EAAD,oBAAagB,EAAOJ,aAApB,aAAa,EAAckB,WAE3B,SAAChC,GAAD,gBACE4B,KAAK,YACDb,EAAS,WAAY,CACvBc,SAAU,uBACVC,QAAS,CACPC,MACE,6DACFC,QACE,qIARR,IAWEC,YAAY,eAEd,SAAC/B,EAAD,oBAAagB,EAAOgB,gBAApB,aAAa,EAAiBF,WAE9B,SAAC7B,EAAD,CAAQgC,SAAU5B,GAA4C,IAA/B6B,OAAOC,KAAKnB,GAAQoB,OAAnD,0BAOT,CC7Ec,SAASC,IACtB,OAAO,SAACnC,EAAD,GACR,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 60px;\n`;\nexport const Form = styled.form`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 12px;\n  padding: 10px 20px 20px;\n  width: 400px;\n  @media screen and (max-width: 768px) {\n    max-width: 280px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 500px;\n    padding: 20px 40px 40px;\n  }\n`;\nexport const Text = styled.p`\n  color: ${({ theme }) => theme.colors.grey};\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  border-radius: 8px;\n  width: 360px;\n  height: 50px;\n  border: 1px solid ${({ theme }) => theme.colors.grey};\n  padding: 4px 12px;\n  font-size: 16px;\n  &:focus {\n    outline: transparent;\n    border-color: ${({ theme }) => theme.colors.accent};\n  }\n  @media screen and (max-width: 768px) {\n    width: 220px;\n    height: 35px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 420px;\n  }\n`;\nexport const Validation = styled.p`\n  margin-bottom: 24px;\n  color: red;\n  text-align: start;\n`;\nexport const Button = styled.button`\n  width: 360px;\n  height: 50px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: ${({ theme }) => theme.colors.accent};\n  color: ${({ theme }) => theme.colors.white};\n  font-size: 16px;\n  box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\n  &:hover,\n  &:focus {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n  }\n  &:disabled {\n    background-color: ${({ theme }) => theme.colors.grey};\n  }\n  @media screen and (max-width: 768px) {\n    width: 220px;\n    height: 40px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 420px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form';\nimport { logIn } from 'redux/authentification/operations';\nimport { selectIsLoading } from 'redux/authentification/selectors';\nimport {\n  Form,\n  Input,\n  Validation,\n  Button,\n  Text,\n  Container,\n} from './LoginForm.styled';\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'all',\n    defaultValues: {\n      name: '',\n      email: '',\n    },\n  });\n\n  const onSubmitHandler = data => {\n    dispatch(logIn(data))\n      .unwrap()\n      .then(({ user }) => toast.success(`Welcome back ${user.name}`))\n      .catch(() => toast.error('Something went wrong. Please try again'));\n\n    reset();\n  };\n  return (\n    <section>\n      <Container>\n        <Form onSubmit={handleSubmit(onSubmitHandler)}>\n          <Text>Log in</Text>\n          <Input\n            type=\"text\"\n            {...register('email', {\n              required: 'Email is required',\n              pattern: {\n                value: /^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w{2,3})+$/,\n                message: 'Invalid type of email',\n              },\n            })}\n            placeholder=\"Email\"\n          />\n          <Validation>{errors.email?.message}</Validation>\n\n          <Input\n            type=\"password\"\n            {...register('password', {\n              required: 'Password is required',\n              pattern: {\n                value:\n                  /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#%&])(?=.{8,16})/,\n                message:\n                  'Invalid type of password ( password must be at least of 8 characters including number, upper, lower and one special character)',\n              },\n            })}\n            placeholder=\"Password\"\n          />\n          <Validation>{errors.password?.message}</Validation>\n\n          <Button disabled={isLoading || Object.keys(errors).length !== 0}>\n            Log in\n          </Button>\n        </Form>\n      </Container>\n    </section>\n  );\n}\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nexport default function LoginPage() {\n  return <LoginForm />;\n}\n"],"names":["Container","styled","Form","theme","colors","white","Text","grey","Input","accent","Validation","Button","LoginForm","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","useForm","mode","defaultValues","name","email","register","handleSubmit","reset","errors","formState","onSubmit","data","logIn","unwrap","then","user","toast","catch","type","required","pattern","value","message","placeholder","password","disabled","Object","keys","length","LoginPage"],"sourceRoot":""}